DO . LOOP   do: ( end+1 start - )   Set up loop. Given index range.
I   ( - index ) Place current loop index on data stack.
J   ( - index ) Return index of next outer loop in same definition.
LEAVE   ( - )   Terminate loop at next LOOP or +LOOP, by setting limit equal to index.
dO . + LOOP     do: ( limit start - ) + loop: ( n - )   Like DO . LOOP, but adds stack value (instead of always 1 ) to index. Loop terminates when index is greater than or equat to limit (n>0), or when index is less than limit (n<0) "plus-loop"
IF . (true) . THEN  if: (flag - )   If top stact true, execute.
IF . (true) . ELSE . (false) . THEN if: (flag - )   Same, but if false, execute ELSE clause
BEGIN . UNTIL   until: ( flag - )   Loop back to BEGIN until true and UNTIL
BEGIN . WHILE . REPEAT  while: ( flag - )   Loop while true at WHILE: REPEAt loops unconditionally to BEGIN, when false, continue after REPEAT
EXIT    ( - )   Terminate execution of colon definition. (may not be used within DO . LOOP)
EXECUTE ( a d d r - )   Ececute dictionary entry at compilation address on stack (e.g., address returned by FIND)

